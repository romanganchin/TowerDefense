# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tower_defense/MoveCreepersSrvRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class MoveCreepersSrvRequest(genpy.Message):
  _md5sum = "45228e9cc51bf84db6a86e638e9ab23d"
  _type = "tower_defense/MoveCreepersSrvRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Bool create_new

================================================================================
MSG: std_msgs/Bool
bool data"""
  __slots__ = ['create_new']
  _slot_types = ['std_msgs/Bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       create_new

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveCreepersSrvRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.create_new is None:
        self.create_new = std_msgs.msg.Bool()
    else:
      self.create_new = std_msgs.msg.Bool()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.create_new.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.create_new is None:
        self.create_new = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 1
      (self.create_new.data,) = _struct_B.unpack(str[start:end])
      self.create_new.data = bool(self.create_new.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.create_new.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.create_new is None:
        self.create_new = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 1
      (self.create_new.data,) = _struct_B.unpack(str[start:end])
      self.create_new.data = bool(self.create_new.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tower_defense/MoveCreepersSrvResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class MoveCreepersSrvResponse(genpy.Message):
  _md5sum = "b02158e175ba8c2df2cd467c4f121a56"
  _type = "tower_defense/MoveCreepersSrvResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point32[] creeper_locations
std_msgs/Bool reached_end


================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: std_msgs/Bool
bool data"""
  __slots__ = ['creeper_locations','reached_end']
  _slot_types = ['geometry_msgs/Point32[]','std_msgs/Bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       creeper_locations,reached_end

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveCreepersSrvResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.creeper_locations is None:
        self.creeper_locations = []
      if self.reached_end is None:
        self.reached_end = std_msgs.msg.Bool()
    else:
      self.creeper_locations = []
      self.reached_end = std_msgs.msg.Bool()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.creeper_locations)
      buff.write(_struct_I.pack(length))
      for val1 in self.creeper_locations:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      buff.write(_struct_B.pack(self.reached_end.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.creeper_locations is None:
        self.creeper_locations = None
      if self.reached_end is None:
        self.reached_end = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.creeper_locations = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.creeper_locations.append(val1)
      start = end
      end += 1
      (self.reached_end.data,) = _struct_B.unpack(str[start:end])
      self.reached_end.data = bool(self.reached_end.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.creeper_locations)
      buff.write(_struct_I.pack(length))
      for val1 in self.creeper_locations:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      buff.write(_struct_B.pack(self.reached_end.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.creeper_locations is None:
        self.creeper_locations = None
      if self.reached_end is None:
        self.reached_end = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.creeper_locations = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.creeper_locations.append(val1)
      start = end
      end += 1
      (self.reached_end.data,) = _struct_B.unpack(str[start:end])
      self.reached_end.data = bool(self.reached_end.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_3f = struct.Struct("<3f")
class MoveCreepersSrv(object):
  _type          = 'tower_defense/MoveCreepersSrv'
  _md5sum = 'e2834ea2353683ade5972a04f8673e55'
  _request_class  = MoveCreepersSrvRequest
  _response_class = MoveCreepersSrvResponse
