/* Auto-generated by genmsg_cpp for file /media/sf_403/catkin_ws/src/TowerDefense/tower_defense/srv/ObstaclePointCloudSrv.srv */
#ifndef TOWER_DEFENSE_SERVICE_OBSTACLEPOINTCLOUDSRV_H
#define TOWER_DEFENSE_SERVICE_OBSTACLEPOINTCLOUDSRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Point32.h"
#include "geometry_msgs/Point32.h"


#include "geometry_msgs/Point32.h"

namespace tower_defense
{
template <class ContainerAllocator>
struct ObstaclePointCloudSrvRequest_ {
  typedef ObstaclePointCloudSrvRequest_<ContainerAllocator> Type;

  ObstaclePointCloudSrvRequest_()
  : R()
  , T()
  , P()
  {
    R.assign(0.0);
  }

  ObstaclePointCloudSrvRequest_(const ContainerAllocator& _alloc)
  : R()
  , T(_alloc)
  , P(_alloc)
  {
    R.assign(0.0);
  }

  typedef boost::array<float, 9>  _R_type;
  boost::array<float, 9>  R;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _T_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  T;

  typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _P_type;
  std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  P;


  typedef boost::shared_ptr< ::tower_defense::ObstaclePointCloudSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tower_defense::ObstaclePointCloudSrvRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct ObstaclePointCloudSrvRequest
typedef  ::tower_defense::ObstaclePointCloudSrvRequest_<std::allocator<void> > ObstaclePointCloudSrvRequest;

typedef boost::shared_ptr< ::tower_defense::ObstaclePointCloudSrvRequest> ObstaclePointCloudSrvRequestPtr;
typedef boost::shared_ptr< ::tower_defense::ObstaclePointCloudSrvRequest const> ObstaclePointCloudSrvRequestConstPtr;



template <class ContainerAllocator>
struct ObstaclePointCloudSrvResponse_ {
  typedef ObstaclePointCloudSrvResponse_<ContainerAllocator> Type;

  ObstaclePointCloudSrvResponse_()
  : P_prime()
  {
  }

  ObstaclePointCloudSrvResponse_(const ContainerAllocator& _alloc)
  : P_prime(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _P_prime_type;
  std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  P_prime;


  typedef boost::shared_ptr< ::tower_defense::ObstaclePointCloudSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tower_defense::ObstaclePointCloudSrvResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct ObstaclePointCloudSrvResponse
typedef  ::tower_defense::ObstaclePointCloudSrvResponse_<std::allocator<void> > ObstaclePointCloudSrvResponse;

typedef boost::shared_ptr< ::tower_defense::ObstaclePointCloudSrvResponse> ObstaclePointCloudSrvResponsePtr;
typedef boost::shared_ptr< ::tower_defense::ObstaclePointCloudSrvResponse const> ObstaclePointCloudSrvResponseConstPtr;


struct ObstaclePointCloudSrv
{

typedef ObstaclePointCloudSrvRequest Request;
typedef ObstaclePointCloudSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ObstaclePointCloudSrv
} // namespace tower_defense

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tower_defense::ObstaclePointCloudSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tower_defense::ObstaclePointCloudSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tower_defense::ObstaclePointCloudSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "07f699fdc96783187c3d9db82c36cb12";
  }

  static const char* value(const  ::tower_defense::ObstaclePointCloudSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x07f699fdc9678318ULL;
  static const uint64_t static_value2 = 0x7c3d9db82c36cb12ULL;
};

template<class ContainerAllocator>
struct DataType< ::tower_defense::ObstaclePointCloudSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/ObstaclePointCloudSrvRequest";
  }

  static const char* value(const  ::tower_defense::ObstaclePointCloudSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tower_defense::ObstaclePointCloudSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[9] R\n\
geometry_msgs/Point32 T\n\
geometry_msgs/Point32[] P\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::tower_defense::ObstaclePointCloudSrvRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tower_defense::ObstaclePointCloudSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tower_defense::ObstaclePointCloudSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tower_defense::ObstaclePointCloudSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6c657ebefd18d441c962728a7a40fd89";
  }

  static const char* value(const  ::tower_defense::ObstaclePointCloudSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6c657ebefd18d441ULL;
  static const uint64_t static_value2 = 0xc962728a7a40fd89ULL;
};

template<class ContainerAllocator>
struct DataType< ::tower_defense::ObstaclePointCloudSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/ObstaclePointCloudSrvResponse";
  }

  static const char* value(const  ::tower_defense::ObstaclePointCloudSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tower_defense::ObstaclePointCloudSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Point32[] P_prime\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const  ::tower_defense::ObstaclePointCloudSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tower_defense::ObstaclePointCloudSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.R);
    stream.next(m.T);
    stream.next(m.P);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ObstaclePointCloudSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tower_defense::ObstaclePointCloudSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.P_prime);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ObstaclePointCloudSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<tower_defense::ObstaclePointCloudSrv> {
  static const char* value() 
  {
    return "223e64a99fafffe6bb9729d31c47a42e";
  }

  static const char* value(const tower_defense::ObstaclePointCloudSrv&) { return value(); } 
};

template<>
struct DataType<tower_defense::ObstaclePointCloudSrv> {
  static const char* value() 
  {
    return "tower_defense/ObstaclePointCloudSrv";
  }

  static const char* value(const tower_defense::ObstaclePointCloudSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tower_defense::ObstaclePointCloudSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "223e64a99fafffe6bb9729d31c47a42e";
  }

  static const char* value(const tower_defense::ObstaclePointCloudSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tower_defense::ObstaclePointCloudSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/ObstaclePointCloudSrv";
  }

  static const char* value(const tower_defense::ObstaclePointCloudSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tower_defense::ObstaclePointCloudSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "223e64a99fafffe6bb9729d31c47a42e";
  }

  static const char* value(const tower_defense::ObstaclePointCloudSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tower_defense::ObstaclePointCloudSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/ObstaclePointCloudSrv";
  }

  static const char* value(const tower_defense::ObstaclePointCloudSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // TOWER_DEFENSE_SERVICE_OBSTACLEPOINTCLOUDSRV_H

