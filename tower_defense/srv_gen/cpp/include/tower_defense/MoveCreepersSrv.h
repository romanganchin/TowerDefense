/* Auto-generated by genmsg_cpp for file /home/sorloff/403/sf_403/catkin_ws/src/TowerDefense/tower_defense/srv/MoveCreepersSrv.srv */
#ifndef TOWER_DEFENSE_SERVICE_MOVECREEPERSSRV_H
#define TOWER_DEFENSE_SERVICE_MOVECREEPERSSRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "std_msgs/Bool.h"



namespace tower_defense
{
template <class ContainerAllocator>
struct MoveCreepersSrvRequest_ {
  typedef MoveCreepersSrvRequest_<ContainerAllocator> Type;

  MoveCreepersSrvRequest_()
  : create_new()
  {
  }

  MoveCreepersSrvRequest_(const ContainerAllocator& _alloc)
  : create_new(_alloc)
  {
  }

  typedef  ::std_msgs::Bool_<ContainerAllocator>  _create_new_type;
   ::std_msgs::Bool_<ContainerAllocator>  create_new;


  typedef boost::shared_ptr< ::tower_defense::MoveCreepersSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tower_defense::MoveCreepersSrvRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct MoveCreepersSrvRequest
typedef  ::tower_defense::MoveCreepersSrvRequest_<std::allocator<void> > MoveCreepersSrvRequest;

typedef boost::shared_ptr< ::tower_defense::MoveCreepersSrvRequest> MoveCreepersSrvRequestPtr;
typedef boost::shared_ptr< ::tower_defense::MoveCreepersSrvRequest const> MoveCreepersSrvRequestConstPtr;



template <class ContainerAllocator>
struct MoveCreepersSrvResponse_ {
  typedef MoveCreepersSrvResponse_<ContainerAllocator> Type;

  MoveCreepersSrvResponse_()
  {
  }

  MoveCreepersSrvResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::tower_defense::MoveCreepersSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tower_defense::MoveCreepersSrvResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct MoveCreepersSrvResponse
typedef  ::tower_defense::MoveCreepersSrvResponse_<std::allocator<void> > MoveCreepersSrvResponse;

typedef boost::shared_ptr< ::tower_defense::MoveCreepersSrvResponse> MoveCreepersSrvResponsePtr;
typedef boost::shared_ptr< ::tower_defense::MoveCreepersSrvResponse const> MoveCreepersSrvResponseConstPtr;


struct MoveCreepersSrv
{

typedef MoveCreepersSrvRequest Request;
typedef MoveCreepersSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct MoveCreepersSrv
} // namespace tower_defense

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tower_defense::MoveCreepersSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tower_defense::MoveCreepersSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tower_defense::MoveCreepersSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "45228e9cc51bf84db6a86e638e9ab23d";
  }

  static const char* value(const  ::tower_defense::MoveCreepersSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x45228e9cc51bf84dULL;
  static const uint64_t static_value2 = 0xb6a86e638e9ab23dULL;
};

template<class ContainerAllocator>
struct DataType< ::tower_defense::MoveCreepersSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/MoveCreepersSrvRequest";
  }

  static const char* value(const  ::tower_defense::MoveCreepersSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tower_defense::MoveCreepersSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "std_msgs/Bool create_new\n\
\n\
================================================================================\n\
MSG: std_msgs/Bool\n\
bool data\n\
";
  }

  static const char* value(const  ::tower_defense::MoveCreepersSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::tower_defense::MoveCreepersSrvRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tower_defense::MoveCreepersSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tower_defense::MoveCreepersSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tower_defense::MoveCreepersSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::tower_defense::MoveCreepersSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::tower_defense::MoveCreepersSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/MoveCreepersSrvResponse";
  }

  static const char* value(const  ::tower_defense::MoveCreepersSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tower_defense::MoveCreepersSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::tower_defense::MoveCreepersSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::tower_defense::MoveCreepersSrvResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tower_defense::MoveCreepersSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.create_new);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveCreepersSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tower_defense::MoveCreepersSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveCreepersSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<tower_defense::MoveCreepersSrv> {
  static const char* value() 
  {
    return "45228e9cc51bf84db6a86e638e9ab23d";
  }

  static const char* value(const tower_defense::MoveCreepersSrv&) { return value(); } 
};

template<>
struct DataType<tower_defense::MoveCreepersSrv> {
  static const char* value() 
  {
    return "tower_defense/MoveCreepersSrv";
  }

  static const char* value(const tower_defense::MoveCreepersSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tower_defense::MoveCreepersSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "45228e9cc51bf84db6a86e638e9ab23d";
  }

  static const char* value(const tower_defense::MoveCreepersSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tower_defense::MoveCreepersSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/MoveCreepersSrv";
  }

  static const char* value(const tower_defense::MoveCreepersSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tower_defense::MoveCreepersSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "45228e9cc51bf84db6a86e638e9ab23d";
  }

  static const char* value(const tower_defense::MoveCreepersSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tower_defense::MoveCreepersSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/MoveCreepersSrv";
  }

  static const char* value(const tower_defense::MoveCreepersSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // TOWER_DEFENSE_SERVICE_MOVECREEPERSSRV_H

