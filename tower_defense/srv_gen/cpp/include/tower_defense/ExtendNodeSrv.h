/* Auto-generated by genmsg_cpp for file /home/roman/robotics_ws/src/TowerDefense/tower_defense/srv/ExtendNodeSrv.srv */
#ifndef TOWER_DEFENSE_SERVICE_EXTENDNODESRV_H
#define TOWER_DEFENSE_SERVICE_EXTENDNODESRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"


#include "geometry_msgs/Point.h"

namespace tower_defense
{
template <class ContainerAllocator>
struct ExtendNodeSrvRequest_ {
  typedef ExtendNodeSrvRequest_<ContainerAllocator> Type;

  ExtendNodeSrvRequest_()
  : P()
  , q()
  {
  }

  ExtendNodeSrvRequest_(const ContainerAllocator& _alloc)
  : P(_alloc)
  , q(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _P_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  P;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _q_type;
   ::geometry_msgs::Point_<ContainerAllocator>  q;


  typedef boost::shared_ptr< ::tower_defense::ExtendNodeSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tower_defense::ExtendNodeSrvRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct ExtendNodeSrvRequest
typedef  ::tower_defense::ExtendNodeSrvRequest_<std::allocator<void> > ExtendNodeSrvRequest;

typedef boost::shared_ptr< ::tower_defense::ExtendNodeSrvRequest> ExtendNodeSrvRequestPtr;
typedef boost::shared_ptr< ::tower_defense::ExtendNodeSrvRequest const> ExtendNodeSrvRequestConstPtr;



template <class ContainerAllocator>
struct ExtendNodeSrvResponse_ {
  typedef ExtendNodeSrvResponse_<ContainerAllocator> Type;

  ExtendNodeSrvResponse_()
  : q_near_index(0)
  , q_new()
  {
  }

  ExtendNodeSrvResponse_(const ContainerAllocator& _alloc)
  : q_near_index(0)
  , q_new(_alloc)
  {
  }

  typedef int32_t _q_near_index_type;
  int32_t q_near_index;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _q_new_type;
   ::geometry_msgs::Point_<ContainerAllocator>  q_new;


  typedef boost::shared_ptr< ::tower_defense::ExtendNodeSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tower_defense::ExtendNodeSrvResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct ExtendNodeSrvResponse
typedef  ::tower_defense::ExtendNodeSrvResponse_<std::allocator<void> > ExtendNodeSrvResponse;

typedef boost::shared_ptr< ::tower_defense::ExtendNodeSrvResponse> ExtendNodeSrvResponsePtr;
typedef boost::shared_ptr< ::tower_defense::ExtendNodeSrvResponse const> ExtendNodeSrvResponseConstPtr;


struct ExtendNodeSrv
{

typedef ExtendNodeSrvRequest Request;
typedef ExtendNodeSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ExtendNodeSrv
} // namespace tower_defense

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tower_defense::ExtendNodeSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tower_defense::ExtendNodeSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tower_defense::ExtendNodeSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8df2b28522a9692779fb75035225f38c";
  }

  static const char* value(const  ::tower_defense::ExtendNodeSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8df2b28522a96927ULL;
  static const uint64_t static_value2 = 0x79fb75035225f38cULL;
};

template<class ContainerAllocator>
struct DataType< ::tower_defense::ExtendNodeSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/ExtendNodeSrvRequest";
  }

  static const char* value(const  ::tower_defense::ExtendNodeSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tower_defense::ExtendNodeSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Point[] P\n\
geometry_msgs/Point q\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::tower_defense::ExtendNodeSrvRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tower_defense::ExtendNodeSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tower_defense::ExtendNodeSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tower_defense::ExtendNodeSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "519eb737cd9604c1a839cf9555d83b5e";
  }

  static const char* value(const  ::tower_defense::ExtendNodeSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x519eb737cd9604c1ULL;
  static const uint64_t static_value2 = 0xa839cf9555d83b5eULL;
};

template<class ContainerAllocator>
struct DataType< ::tower_defense::ExtendNodeSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/ExtendNodeSrvResponse";
  }

  static const char* value(const  ::tower_defense::ExtendNodeSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tower_defense::ExtendNodeSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 q_near_index\n\
geometry_msgs/Point q_new\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::tower_defense::ExtendNodeSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::tower_defense::ExtendNodeSrvResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tower_defense::ExtendNodeSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.P);
    stream.next(m.q);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct ExtendNodeSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tower_defense::ExtendNodeSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.q_near_index);
    stream.next(m.q_new);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct ExtendNodeSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<tower_defense::ExtendNodeSrv> {
  static const char* value() 
  {
    return "39895a811c277641b38420f358a62ecd";
  }

  static const char* value(const tower_defense::ExtendNodeSrv&) { return value(); } 
};

template<>
struct DataType<tower_defense::ExtendNodeSrv> {
  static const char* value() 
  {
    return "tower_defense/ExtendNodeSrv";
  }

  static const char* value(const tower_defense::ExtendNodeSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tower_defense::ExtendNodeSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "39895a811c277641b38420f358a62ecd";
  }

  static const char* value(const tower_defense::ExtendNodeSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tower_defense::ExtendNodeSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/ExtendNodeSrv";
  }

  static const char* value(const tower_defense::ExtendNodeSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tower_defense::ExtendNodeSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "39895a811c277641b38420f358a62ecd";
  }

  static const char* value(const tower_defense::ExtendNodeSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tower_defense::ExtendNodeSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/ExtendNodeSrv";
  }

  static const char* value(const tower_defense::ExtendNodeSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // TOWER_DEFENSE_SERVICE_EXTENDNODESRV_H

