/* Auto-generated by genmsg_cpp for file /home/roman/robotics_ws/src/TowerDefense/tower_defense/srv/BuildRRTSrv.srv */
#ifndef TOWER_DEFENSE_SERVICE_BUILDRRTSRV_H
#define TOWER_DEFENSE_SERVICE_BUILDRRTSRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "tower_defense/RRTNode.h"

namespace tower_defense
{
template <class ContainerAllocator>
struct BuildRRTSrvRequest_ {
  typedef BuildRRTSrvRequest_<ContainerAllocator> Type;

  BuildRRTSrvRequest_()
  {
  }

  BuildRRTSrvRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::tower_defense::BuildRRTSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tower_defense::BuildRRTSrvRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct BuildRRTSrvRequest
typedef  ::tower_defense::BuildRRTSrvRequest_<std::allocator<void> > BuildRRTSrvRequest;

typedef boost::shared_ptr< ::tower_defense::BuildRRTSrvRequest> BuildRRTSrvRequestPtr;
typedef boost::shared_ptr< ::tower_defense::BuildRRTSrvRequest const> BuildRRTSrvRequestConstPtr;



template <class ContainerAllocator>
struct BuildRRTSrvResponse_ {
  typedef BuildRRTSrvResponse_<ContainerAllocator> Type;

  BuildRRTSrvResponse_()
  : rrt()
  {
  }

  BuildRRTSrvResponse_(const ContainerAllocator& _alloc)
  : rrt(_alloc)
  {
  }

  typedef std::vector< ::tower_defense::RRTNode_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::tower_defense::RRTNode_<ContainerAllocator> >::other >  _rrt_type;
  std::vector< ::tower_defense::RRTNode_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::tower_defense::RRTNode_<ContainerAllocator> >::other >  rrt;


  typedef boost::shared_ptr< ::tower_defense::BuildRRTSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tower_defense::BuildRRTSrvResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct BuildRRTSrvResponse
typedef  ::tower_defense::BuildRRTSrvResponse_<std::allocator<void> > BuildRRTSrvResponse;

typedef boost::shared_ptr< ::tower_defense::BuildRRTSrvResponse> BuildRRTSrvResponsePtr;
typedef boost::shared_ptr< ::tower_defense::BuildRRTSrvResponse const> BuildRRTSrvResponseConstPtr;


struct BuildRRTSrv
{

typedef BuildRRTSrvRequest Request;
typedef BuildRRTSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct BuildRRTSrv
} // namespace tower_defense

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tower_defense::BuildRRTSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tower_defense::BuildRRTSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tower_defense::BuildRRTSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::tower_defense::BuildRRTSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::tower_defense::BuildRRTSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/BuildRRTSrvRequest";
  }

  static const char* value(const  ::tower_defense::BuildRRTSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tower_defense::BuildRRTSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::tower_defense::BuildRRTSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::tower_defense::BuildRRTSrvRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tower_defense::BuildRRTSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tower_defense::BuildRRTSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tower_defense::BuildRRTSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9680cc06ea3c47eb5a92d56793715529";
  }

  static const char* value(const  ::tower_defense::BuildRRTSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9680cc06ea3c47ebULL;
  static const uint64_t static_value2 = 0x5a92d56793715529ULL;
};

template<class ContainerAllocator>
struct DataType< ::tower_defense::BuildRRTSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/BuildRRTSrvResponse";
  }

  static const char* value(const  ::tower_defense::BuildRRTSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tower_defense::BuildRRTSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
RRTNode[] rrt\n\
\n\
\n\
================================================================================\n\
MSG: tower_defense/RRTNode\n\
# Location of the tree node.\n\
geometry_msgs/Point location\n\
\n\
# Index of parent node, -1 if there is no parent (root node).\n\
int32 parent\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::tower_defense::BuildRRTSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tower_defense::BuildRRTSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct BuildRRTSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tower_defense::BuildRRTSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.rrt);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct BuildRRTSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<tower_defense::BuildRRTSrv> {
  static const char* value() 
  {
    return "9680cc06ea3c47eb5a92d56793715529";
  }

  static const char* value(const tower_defense::BuildRRTSrv&) { return value(); } 
};

template<>
struct DataType<tower_defense::BuildRRTSrv> {
  static const char* value() 
  {
    return "tower_defense/BuildRRTSrv";
  }

  static const char* value(const tower_defense::BuildRRTSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tower_defense::BuildRRTSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9680cc06ea3c47eb5a92d56793715529";
  }

  static const char* value(const tower_defense::BuildRRTSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tower_defense::BuildRRTSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/BuildRRTSrv";
  }

  static const char* value(const tower_defense::BuildRRTSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tower_defense::BuildRRTSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9680cc06ea3c47eb5a92d56793715529";
  }

  static const char* value(const tower_defense::BuildRRTSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tower_defense::BuildRRTSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tower_defense/BuildRRTSrv";
  }

  static const char* value(const tower_defense::BuildRRTSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // TOWER_DEFENSE_SERVICE_BUILDRRTSRV_H

